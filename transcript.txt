~0~hello all in this tutorial we will ~2~combine the modules that we have ~4~developed before and will complete the ~6~hardware design for our IP so we have ~10~already done two or three modules we ~13~already have nine buffer and we have the ~17~control logic and we also have the ~20~convolution what you can so we'll ~22~compare them and we'll make a image ~25~processing IP so this will be our top ~29~post what you'll give me ~36~process now this module will be ~50~interfacing it with the DMA controller ~52~and remember the DMA controller it has ~55~the X extreme interface so that our ~59~comes as well as goes through the ax ~62~extreme interface and we also have an ~65~interrupt signal coming from the IP so ~68~we'll add that also can so we are going ~75~to follow that XE interface so let's ~80~call it C clock input XE reset and ~87~actually there for low active low ~88~research so that is this one then let's ~92~write the slave interface so this is the ~96~interface through which data will be ~97~coming from the DMA controller so let's ~101~say I thought valid we have an 8-bit ~106~data basically this is the pixel data ~108~data we need to say ready then we have ~117~water interface through which we will be ~119~sending the data back to the DMA ~122~controller so we have output ~125~all that Valley put a bit but after than ~132~when you shall write okay so that ~140~completes the axis frame and we also ~142~need to add this interrupt signal in ~148~trouble okay so now let's instantiate ~150~the module so first let's instantiate ~153~this image control module okay so this ~163~is where our line defense and all are ~166~sitting so steps like image control so ~172~we can directly connect to the exit rock ~177~reset don't care ~180~we drip the coding assuming this is ~182~active high reset but XE reset is active ~185~low so we will invert it and we'll ~188~connect it the pixel data that is this ~197~data itself input data and pixel data ~200~valid will be valid now there was no ~208~ready signal coming from this module ~211~because as I mentioned before you are ~214~writing to a memory so basically memory ~217~will be always ready so that's why we ~219~did add that signal that but we will ~222~have to write some logic for controlling ~226~this ready signal which will do okay so ~229~these two these are the output from the ~232~image controller which will be going to ~235~this convolution Morrible understand ~238~that ~241~[Music] ~249~okay clock there is no reset signal for ~256~this module because there is nothing to ~258~reset inside that just a convinced works ~265~so I pick some data so the data here is ~268~the artwork from this module so let's ~271~take this take this and it is 72 bit so ~276~wire 31 down to 0 ~280~thanks a lot everyone for helping sell ~283~data ~293~[Music] ~305~and the output from the convolution goes ~312~as the output of this module so this we ~315~connect to data and this man it will ~323~connect to or that okay so here also we ~341~didn't connect ready signal okay so ~343~remember this ready signal is coming ~346~from the DMA controller when you're ~348~sending data same way this ready signal ~352~you are giving to the DMA controller ~354~when you are accepting data from the DMA ~357~controller so if you remember our ~358~previous XE stream IP development what ~362~we did was we directly connected this ~365~ready to this ready so that whenever the ~369~DMA controller says he's not ready types ~371~of data he will tell the DMA controller ~373~I am NOT ready tax of data okay so that ~375~would have worked but here when issue is ~379~we have pipelining inside our ~382~convolution Moodle okay so the data ~385~coming from the line buffer does not ~387~immediately go into the output it is ~390~going through three levels of pipelining ~392~here so because of that word reference ~395~ease even if you directly connect these ~397~two signals if the DMA controller says ~399~like I am NOT ready to accept data you ~401~will tell the DMA controller you are not ~403~ready to accept data but the only ~406~problem is you already have data in the ~408~internal pipelines ~410~so I guess if it is three levels of ~413~pipelining you already have three data ~417~in the internal pipeline and that you ~422~will use actually because there is no ~424~handshaking with in the pipelining it is ~426~Riley taking data from the line buffer ~428~and moving across the pipeline so ~432~basically directly connecting these two ~434~work again so simplest way to do it you ~438~can absorb it in many ways you can add ~440~this control signal to the pipelining ~443~also means the pipeline it doesn't ~445~always work that is also checking for ~447~the Ernie signal that is one way another ~450~simplest way is to add an output buffer ~452~in most design you will see like we will ~456~have an output buffer or basically it ~458~will be a FIFO will add a five-foot to ~461~the output to manage the mismatch ~463~between these input and the output so ~467~what happens is the offer from the ~469~convolution I will not directly send it ~471~to the output instead of that I will be ~474~initially storing it in a FIFO and from ~476~the FIFO it will be sent to the output ~479~okay so I will put some control signal ~483~in the FIFO so that when the FIFO is ~486~almost full I'm saying like I am NOT ~489~ready types of data when the FIFO may ~492~become almost full it will become almost ~494~for when the FIFO is not able to send ~497~data out which is basically this ready ~499~signal is slow so in that is because of ~502~the pipe FIFO ~503~it will be able to store all these ~506~intermediate pipeline data in turn you ~508~won't lose data and later when this ~511~ready signal becomes high the FIFO will ~513~be able to send it out okay so you can ~515~see in in most designs usually there ~519~will be a 5-4 at the input also to ~521~manage the mismatch between the pulse ~525~rate between how data is coming and how ~527~you are processing data but in our case ~530~we don't need any input buffer because ~532~we already have line buffer which is ~534~kind of a buffer so I'm just adding a ~536~5-4 to the output okay so that's an IP ~541~go down can use eiling's IP code to do ~544~it FIFO generator let's call it and we ~559~are going to use an axe a stream 5/4 ~563~when your friends out there okay here I ~567~find the width and here notice the width ~570~is specified in number of bytes actually ~572~so we just need 1 by 8 which is in terms ~577~of white north in terms of bits so there ~579~is something called the use of it that ~581~is for sending this additional signal ~585~optional one you don't have to signal so ~587~you can make it 0 cat and okay for depth ~594~okay we don't need a very large fight ~596~for maybe because as I mentioned when I ~600~back pressure in the worst case I have ~603~300 for data in my pipelining I just ~607~want to buffer only that much okay so we ~609~can choose the smallest possible size to ~612~minimize the dose of utilization okay so ~617~16 that I can store and I will add a ~620~programmable full signal here and there ~625~I am putting like 8 that means in in ~629~ideal case there shouldn't be any data ~631~in the 5 ok so if they acts a DMA ~634~controller is already tracks of data ~635~from me I'll be continuously sending so ~638~effectively data comes to the FIFO it ~640~goes out of the FIFO so it is like a ~641~transference ~643~but only when he is putting back ~645~pressure I will have problem so in that ~648~case I'll be back pressuring the DMA ~652~controller saying like I am NOT ready to ~655~it so data so what I am doing here is if ~657~I have 8 data in my in my Phi 4 that ~662~means there is some kind of back ~663~pressure coming from the Mass Effect ~666~I will assert this signal programmable ~669~phone and this signal will be connected ~672~to the ready signal to the slave port so ~676~once this signal comes Hawaii I will say ~679~like I'm not ready to accept data so he ~682~will stop sending it but I already have ~686~data in the pipeline 304 that will also ~688~get written to the FIFO but my Wi-Fi is ~690~16 deep ok so and I already have a ~694~still it will make it maybe 11 or 12 but ~697~inside the FIFO still the FIFO hold off ~700~so that's the logic and that said we ~706~need only that much okay it will be ~710~introduced to clock latency but that is ~713~fine it takes one 18 kilo of it okay so ~717~internal either it is going to use the ~718~block trap which is 36 kilo bit per ~721~designing stay can break 136 kilobit ~725~program into to 18 kilo feet so it's ~728~going today 18 kilo bit rap or half rock ~732~track okay let him generate it but we ~739~can't get a go here and take the ~741~instantiation template ~753~okay so let's instantiate it from the ~756~top of buffer we said PCO get these ~765~signals we don't need this is clock ~768~reset which is connect okay this is his ~775~slave Alex so as I mentioned before the ~777~offer from convolution or data click on ~783~the key and or not a bandit here now ~787~whether the FIFO is already or not I am ~789~NOT checking because based on my car and ~791~go check okay there is no case the FIFO ~794~would be ready he'll be at the maximum ~797~in have 60 how to succeed he will have ~801~myself maybe 12 because as soon as he is ~804~half full I would say like I can't ~807~accept any more data so there is no way ~809~like he will all flow and this signal ~811~will become no okay and offer from the ~814~FIFO he will connect to the output caso ~818~de signal ~820~okay this we will connect to the output ~822~okay so let me connect everything let me ~825~call it run world ~832~time let's commit that here let's call ~835~this car more but when it let's dip here ~845~that makes more sensible name and this ~848~output okay M Max is valid that we will ~852~connect to or not elected and this ready ~859~we will directly connect here and data ~865~collector or data and this programmable ~870~phone okay so the declaring wire ~877~so this will become high when he is four ~881~okay so I have this ready signal that's ~887~what I want to manipulate I will say a ~890~sign is Lord of from you when he is not ~897~half full times I am ready to accept ~900~that when he becomes half full and say I ~903~am no longer it takes the better ~904~so let us declare them also converted at ~907~our soul so 8-bit which is output after ~911~evolution okay so that completes acts ~926~extreme interface now the only stuff ~928~remaining is the interrupt signal so ~931~then we should send an intro so as I ~934~mentioned before we have only four line ~936~buffer inside our IP and then once we ~940~finish processing one of the line ~942~buffers we will send an interrupt to the ~945~processor saying okay I have a free line ~948~buffer you can send the next line of the ~950~image okay so that's where we are going ~952~to use the interrupt signal so that ~954~interim signal should become one or ~956~become high whenever we have a free line ~960~of inside our IP how do we know whether ~963~we have a free line buffer inside our IP ~966~for that we need to go back to the ~969~control logic and look at our small ~972~state machine so if you remember in the ~975~read buffer state okay when the read ~979~counter becomes file oven and in the ~982~next clock it is indicating we have ~985~finished reading from a line buffer so ~988~once we have finished reading a line ~990~buffer means we have a free line buffer ~993~available so same case I can use to ~997~generate an interrupt signal ~1000~okay so let's call it oh they are from ~1004~here itself ~1004~we'll make it and we will go to idle ~1009~State ~1009~and if the idle state will make it 0 ~1014~solution especially now the interim ~1032~signal it will be only only one clock ~1036~void okay the parts width is only one ~1039~clock because he and I'm making it one ~1040~next stroke I'll go to the Isle State ~1042~and I will make it so last tutorial I ~1045~mentioned some cases there is a minimum ~1047~pulse with the requirement for intra but ~1051~things we are going to use edge ~1052~triggered interrupt this is fine if you ~1055~are going for level triggered in trap ~1056~maybe this will be insufficient yes in ~1060~fear using only edge triggered in trap ~1062~it should be perfect ~1064~so let's come back here so let me add ~1068~that point here and just connect it to ~1073~the operator ~1074~okay so let's call it going appear to ~1077~indicate it so no forcing okay so that ~1080~completes coding for our IP only thing ~1086~left is converting it into IP excel ~1089~format so that we can use that in ~1094~homicide so that step is exactly same as ~1096~a previous project where I decided the ~1100~previous image processing IP so you go ~1103~to the tools create an package new IP ~1105~and you choose package your current ~1108~project node I create a new XML file ~1111~choose this one next include xcf file ~1114~you should choose it because we have a ~1116~FIFO signing scope so he will include ~1119~that 5 4 also as part of your IP and he ~1125~is basically asking where the IP x at ~1128~file should be stored so let's say like ~1132~directories to current project is inside ~1137~that folder ~1138~much more this and therefore that to our ~1140~IP report because we are keeping all our ~1143~IP step SOT we were on image from ~1146~something that's where my product is ~1147~hitting I'm just saying keep the IP ~1150~exact file depth ~1160~okay so when Catholics caller:i be just ~1166~to image process let the beats name now ~1191~port mapping this again I heard up in ~1194~the previous tutorial we just have to ~1199~map boats for countries that this is ~1208~axis frame interfaces so in the block ~1211~design if you just want to drag and drop ~1213~the signal you need to group them ~1215~together then only me weather will ~1217~understand this is like axis frame ~1221~interface so click on add interface and ~1225~keep going because I have already ~1227~covered it before axis frame RTL and ~1230~choose master let's call it m XE stream ~1233~interface and port map this data with ~1237~this data this value is this valid this ~1243~ready ~1244~Viktor Disraeli curse of the port ~1248~mapping is done so he grouped it M axis ~1251~so similarly we have to group the slave ~1254~interface or self so next interface ~1256~choose again XE stream and here choose ~1260~name interface and call it a success - ~1262~indicates a slave interface ~1264~this data this data valid valid and ~1272~ready to ready ~1278~okay so again some warnings are there ~1283~this is similar to our previous tutorial ~1286~you need to specify which base ~1289~interfaces are controlled by this ~1290~particular clock so just complicate go ~1293~to parameters and a parameter and type ~1297~associate that associate the first ~1302~interface and value you just type the ~1309~interface name m underscore axis v : and ~1315~s underscore axis these are the two ~1318~interfaces okay so that warning goes ~1323~away ~1323~optionally you can add 34 clock ~1325~frequency also which is hundred ~1327~megahertz but without that also anything ~1330~looks fine ~1332~okay so that's it no there is no ~1335~addressing we it is going to look ~1338~something like this ~1342~let's expected then just go review and ~1346~review and package your take now it is ~1350~ready to use in your design but one ~1355~important thing we missed we have in ~1357~simulated our IP whether it is really ~1360~working or not we haven't checked that ~1362~we will be doing in the next order thank ~1366~you 